1.Требуется составить расписание случайных проверок.
Создайте оператор выбора, который выдаст 100 дат, начиная с текущей, при этом каждая дата отличается от предыдущей на 2-7 дней.

--------------------------- Solution -----------------------------------------------------------------------------------
SELECT generate_series(
   	CURRENT_DATE,
   	CURRENT_DATE + INTERVAL '700 days',
   	(random() * 5 + 2) * INTERVAL '1 day')::DATE AS date_value
LIMIT 100


2.Требуется оценить эффективность продавцов.
Создайте запрос, который вернёт количество и сумму продаж для каждого продавца,
а также ранжирует продавцов по количеству продаж и по сумме продаж.

Результат запроса должен содержать столбцы id, name из таблицы employee, а также столбцы:
sales_c - количество продаж,
sales_rank_c - ранг по количеству продаж,
sales_s - сумма продаж,
sales_rank_s -  ранг по сумме продаж.

--------------------------------------------Solution--------------------------------------------------------------------

SELECT e.id,
e.name,
COUNT(s.id) AS sales_c,
RANK() OVER(ORDER BY COUNT(s.id)) AS sales_rank_c,
SUM(s.price) AS sales_s,
RANK() OVER(ORDER BY SUM(s.price)) AS sales_rank_s
FROM employee AS e LEFT JOIN sales AS s
	ON e.id = s.employee_id
GROUP BY e.id
ORDER BY e.id


3.Имеется таблица денежных переводов transfers.

from – номер аккаунта, с которого сделан перевод,
to – номер аккаунта, на который сделан перевод,
amount – сумма перевода,
tdate – дата перевода.
Требуется создать оператор выбора, который для каждого аккаунта выведет периоды постоянства остатков.
Результат запроса должен содержать столбцы acc – номер аккаунта, dt_from - начало периода,
dt_to - конец периода, balance – остаток на счёте в данном периоде.
Дата конца последнего периода – 01.01.3000.

--------------------------------------------------SOLUTION--------------------------------------------------------------

WITH t1 AS (
    SELECT
        "from" as acc,
        tdate as dt_from,
        LEAD(tdate, 1, '3000-01-01') OVER (PARTITION BY "from" ORDER BY tdate) as dt_to
    FROM
        transfers
)
SELECT
    acc,
    dt_from,
    dt_to,
    SUM(COALESCE((SELECT -1 * amount FROM transfers t2 WHERE t2.tdate = t1.dt_from AND t2."from" = t1.acc), 0)) as balance
FROM
    t1
GROUP BY
    acc, dt_from, dt_to
ORDER BY
    acc, dt_from